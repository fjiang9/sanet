import numpy as np
import pandas as pd
import soundfile as sf
import torch
from torch.utils.data.dataset import Dataset
import random as random


class LibriMix(Dataset):
    """" Dataset class for Librimix source separation tasks.
    Args:
        csv_dir (str): The path to the metatdata file
        sample_rate (int) : The sample rate of the sources and mixtures
        n_src (int) : The number of sources in the mixture
        segment (int) : The desired sources and mixtures length in s
    """
    dataset_name = 'LibriMix'

    def __init__(self, csv_path, sample_rate=8000,
                 n_src=2, segment=3.0):
        self.csv_path = csv_path
        self.segment = segment
        self.sample_rate = sample_rate
        # Open csv file
        if isinstance(csv_path, list):
            self.df = pd.read_csv(self.csv_path[0])
            for i in range(1, len(csv_path)):
                self.df = pd.concat([self.df, pd.read_csv(self.csv_path[i])], axis=0, ignore_index=True)
        else:
            self.df = pd.read_csv(self.csv_path)
        # Get rid of the utterances too short
        if self.segment is not None:
            max_len = len(self.df)
            self.seg_len = int(self.segment * self.sample_rate)
            # Ignore the file shorter than the desired_length
            self.df = self.df[self.df['length'] >= self.seg_len]
            print(f"Drop {max_len - len(self.df)} utterances from {max_len} "
                  f"(shorter than {segment} seconds)")
        else:
            self.seg_len = None
        self.n_src = n_src

    def __len__(self):
        return len(self.df)

    def get_spk_labels(self):
        pass

    def __getitem__(self, idx):
        # Get the row in dataframe
        row = self.df.iloc[idx]
        # Get mixture path
        self.mixture_path = row['mixture_path']
        # If there is a seg start point is set randomly
        while True:
            sources_list = []
            if self.seg_len is not None:
                start = random.randint(0, row['length'] - self.seg_len)
                # start = 0  # For testing, if we want the mixtures are always the same.
                stop = start + self.seg_len
            else:
                start = 0
                stop = None
            # Read sources
            for i in range(self.n_src):
                source_path = row[f'source_{i + 1}_path']
                s, _ = sf.read(source_path, dtype='float32', start=start,
                               stop=stop)
                sources_list.append(s)
            if np.abs(np.vstack(sources_list)).sum(axis=1).min() > 0.1:
                break

        # Read the mixture
        mixture, _ = sf.read(self.mixture_path, dtype='float32', start=start,
                             stop=stop)
        # Convert to torch tensor
        mixture = torch.from_numpy(mixture)
        # Stack sources
        sources = np.vstack(sources_list)
        # Convert sources to tensor
        sources = torch.from_numpy(sources)
        # Get the speaker id
        subnames = row['mixture_ID'].split('_')
        spk_id = [subnames[i].split('-')[0] for i in range(self.n_src)]

        return mixture, spk_id, sources


LIBRISPEECH_SPKID = {'train-100': ['1363', '911', '8108', '5463', '446', '7367', '4813', '7190', '3235', '6000', '254', '6818', '198', '8838', '311', '201', '7505', '3242', '163', '4018', '441', '6925', '3879', '5750', '7278', '87', '8063', '6272', '3807', '5688', '831', '5867', '1841', '7312', '2159', '7078', '89', '1898', '3607', '2952', '1098', '3436', '6454', '27', '3486', '7517', '5104', '887', '8425', '1502', '302', '3526', '200', '3374', '8419', '118', '5049', '7402', '3214', '1992', '6078', '40', '6476', '1040', '2436', '8747', '1553', '625', '1455', '250', '4859', '4160', '7635', '3240', '460', '4267', '6385', '328', '1594', '322', '1088', '32', '1447', '7059', '730', '2416', '1334', '4406', '4362', '374', '60', '8609', '6064', '8095', '8226', '307', '125', '5456', '7794', '1737', '332', '7511', '587', '1867', '3168', '1235', '2691', '403', '78', '103', '3259', '2136', '7148', '226', '5022', '83', '2384', '8465', '696', '3947', '8580', '1081', '3830', '5390', '3723', '2391', '2092', '6836', '4297', '1355', '6531', '405', '229', '2910', '4680', '4340', '1034', '481', '196', '2911', '458', '3699', '7178', '426', '26', '909', '3664', '5163', '4481', '1183', '2893', '8468', '1263', '3983', '1116', '8770', '1069', '4051', '4898', '6181', '4014', '5778', '5322', '8098', '8797', '4640', '39', '248', '6209', '2764', '6848', '669', '2989', '2843', '3440', '4214', '2289', '4137', '1246', '7113', '5393', '6529', '298', '1743', '8088', '1723', '1926', '2007', '4853', '7859', '6563', '4195', '5339', '4397', '7226', '6437', '8123', '4088', '4788', '289', '5808', '8051', '4441', '2836', '1970', '19', '7302', '6415', '2182', '8975', '445', '2002', '2196', '8630', '5678', '3857', '7447', '3112', '6880', '7067', '5789', '211', '2817', '5652', '4830', '412', '6147', '5514', '2514', '6019', '8324', '1624', '5192', '233', '1578', '8629', '5561', '2518', '3982', '8014', '8312', '7780', '6367', '8238', '839', '5703', '7264', '6081', '150', '1963', '7800'],
                     'train-360': ['204', '7783', '718', '5093', '6032', '22', '850', '764', '7258', '7383', '612', '6139', '534', '9022', '6499', '359', '5246', '3258', '2004', '1535', '5635', '2319', '8163', '5538', '258', '5189', '8266', '340', '5029', '3171', '724', '5876', '8771', '4222', '666', '8758', '5940', '868', '2368', '3180', '6788', '3979', '2827', '1422', '70', '1224', '1668', '5809', '7139', '5039', '7245', '8464', '953', '5489', '1296', '8097', '2229', '1731', '7766', '8791', '698', '816', '4848', '7229', '2816', '5712', '636', '8848', '4010', '7540', '8619', '7705', '5727', '6294', '7752', '8527', '2589', '2696', '6378', '2269', '7867', '1923', '1343', '4519', '2582', '6620', '583', '7957', '708', '7241', '7982', '1271', '6865', '439', '2992', '1571', '380', '8718', '1740', '8534', '3852', '6359', '6877', '525', '4260', '7188', '8820', '8498', '98', '318', '4243', '8494', '1748', '81', '1100', '3923', '5513', '1425', '6075', '8050', '1472', '3448', '7657', '3630', '3989', '1018', '671', '598', '475', '6341', '6395', '3118', '296', '1390', '6683', '8506', '8786', '7939', '3905', '4854', '6701', '7959', '4064', '7909', '126', '5319', '6727', '154', '8772', '2531', '3185', '6288', '7395', '3551', '7832', '119', '2149', '2473', '339', '4770', '2093', '2110', '5637', '1634', '1027', '3072', '2971', '2074', '4595', '4839', '8194', '4427', '7665', '7789', '6115', '8776', '6206', '14', '4152', '7518', '8879', '8066', '2499', '369', '166', '2113', '1638', '4719', '7297', '329', '2401', '216', '3615', '2056', '8591', '3230', '7868', '2812', '5123', '2299', '663', '2061', '3645', '8684', '345', '5012', '6981', '188', '8057', '834', '8222', '3008', '2853', '4837', '1061', '100', '6509', '459', '337', '3546', '1513', '7313', '4535', '5604', '922', '208', '6080', '8152', '7981', '2254', '6494', '6157', '3994', '6918', '3370', '1383', '6574', '2427', '1446', '2532', '6269', '4425', '7555', '7339', '815', '688', '8176', '227', '2238', '1536', '1859', '6553', '2364', '6189', '948', '1046', '8142', '4490', '7558', '1001', '8742', '4598', '7120', '3781', '5290', '1264', '7569', '5868', '6519', '4071', '1473', '203', '1913', '2285', '2751', '2085', '1498', '8113', '3816', '1012', '224', '497', '968', '288', '6317', '7739', '593', '2194', '7717', '4246', '3914', '7816', '596', '5740', '5731', '2494', '5724', '986', '5239', '3347', '2769', '8490', '7437', '6120', '7484', '7837', '5570', '1093', '5333', '6993', '115', '1678', '3294', '17', '3119', '1259', '3032', '101', '8225', '1265', '7475', '487', '2272', '1379', '5984', '1160', '3792', '512', '8195', '1060', '4434', '1054', '8722', '3482', '249', '5935', '8080', '207', '6924', '925', '209', '7445', '1460', '5914', '4957', '5660', '5655', '7994', '1754', '664', '409', '2652', '1463', '112', '7090', '783', '1323', '2294', '38', '3490', '3654', '2167', '4806', '8855', '2012', '93', '1547', '1811', '16', '64', '4807', '225', '4098', '5622', '5293', '6006', '2388', '54', '1903', '1705', '8011', '1392', '8119', '5684', '2592', '1987', '2045', '2256', '1639', '7342', '7145', '6300', '7520', '5918', '8421', '8404', '2348', '3083', '8459', '3003', '231', '8824', '6037', '2823', '1777', '4148', '7594', '8118', '3790', '2533', '3733', '1316', '3330', '472', '303', '1066', '2960', '464', '3537', '1121', '511', '4973', '5062', '3046', '6544', '4433', '561', '835', '3368', '4629', '2785', '6119', '4226', '6258', '7085', '4236', '4945', '6686', '5206', '3221', '1079', '8825', '6082', '7030', '192', '2628', '6388', '7949', '1885', '6188', '3187', '7809', '7294', '3389', '3215', '1776', '480', '4057', '272', '1025', '7051', '8713', '589', '1914', '4926', '335', '242', '1933', '6038', '6673', '8705', '4681', '716', '4278', '667', '4331', '3825', '1645', '6965', '7515', '1826', '6828', '8699', '6235', '7398', '3927', '5007', '4744', '3513', '1734', '5115', '7802', '8190', '8008', '606', '4592', '7962', '5400', '2053', '6458', '3967', '5261', '1800', '5968', '1851', '1874', '2709', '6014', '1348', '6694', '8575', '1724', '323', '3228', '1827', '2010', '3686', '5242', '3105', '1053', '7416', '434', '1445', '1448', '7000', '6098', '5723', '899', '5767', '2517', '1944', '4133', '949', '1165', '6330', '2481', '8635', '7881', '7316', '7276', '3835', '8643', '6339', '210', '6233', '7134', '4731', '7286', '3638', '3224', '4145', '1958', '5746', '7538', '30', '836', '4238', '806', '278', '2920', '7095', '7874', '1226', '8329', '984', '7553', '7478', '5975', '580', '5618', '4111', '3945', '3380', '2162', '5147', '451', '820', '1552', '2815', '8545', '8075', '576', '7732', '1031', '581', '4586', '6937', '7384', '3340', '408', '7498', '7240', '492', '2581', '2673', '7117', '979', '3274', '1349', '479', '5063', '7169', '5519', '2397', '6446', '2790', '1112', '217', '699', '9023', '3493', '2498', '7011', '6505', '1241', '2654', '2156', '5186', '2201', '7647', '1195', '1487', '8300', '3092', '4110', '4290', '8028', '6167', '5092', '8605', '7481', '781', '2060', '4733', '1482', '2775', '3521', '711', '3703', '7733', '2393', '6763', '1629', '3864', '476', '7335', '8396', '3289', '1456', '3357', '3114', '157', '829', '6371', '6406', '2882', '1365', '7995', '8228', '8677', '1175', '8006', '240', '637', '1641', '3876', '205', '5606', '6215', '1974', '4438', '7828', '7069', '1289', '1382', '2146', '7945', '3379', '4495', '1556', '5909', '731', '1769', '6160', '8875', '454', '4860', '5448', '3082', '2562', '5190', '1417', '5656', '56', '353', '398', '2774', '1222', '7460', '1401', '4363', '3009', '6690', '4846', '5672', '3584', '8388', '28', '4289', '1052', '510', '8347', '7777', '500', '6492', '6286', '770', '3094', '1311', '6904', '3851', '3157', '5985', '5810', '5002', '8573', '3483', '4335', '3549', '3866', '4039', '1335', '4257', '639', '6426', '8401', '3361', '2577', '4381', '2240', '7247', '2512', '1779', '5717', '1413', '597', '7285', '2787', '7688', '6538', '3446', '6373', '3889', '6060', '2688', '4356', '1028', '7730', '7704', '3540', '4108', '3728', '8592', '8479', '7991', '6054', '7140', '6637', '4800', '7926', '4054', '1337', '1290', '3972', '1050', '2758', '5157', '122', '3977', '1789', '2929', '957', '543', '8687', '1649', '7833', '7932', '6550', '5304', '5054', '79', '2618', '7434', '7126', '548', '5126', '5389', '3307', '6510', '4013', '7720', '7318', '2334', '4116', '7938', '5133', '1603', '6895', '4044', '882', '3328', '3869', '114', '5386', '1509', '8474', '1212', '6099', '6518', '4967', '55', '1849', '2137', '7128', '8193', '6696', '176', '3070', '362', '6308', '1943', '8183', '830', '4899', '8138', '6782', '373', '6643', '5776', '5401', '5266', '1058', '7933', '5154', '1806', '2638', '2570', '8725', '1336', '803', '2411', '5588', '7967', '7314', '2598', '2127', '2204', '23', '4138', '90', '274', '175', '1387', '594', '6575', '246', '7061', '2039', '4358', '6104', '2674', '1825', '920', '7495', '8887', '3025', '1322', '5139', '1313', '4856', '8410', '2999', '1845', '6555', '4590', '1961', '3738', '2230', '7754', '549', '3717', '5883', '159', '559', '1182', '7825', '3922', '6497', '954', '7910', '4734', '1752', '1607', '5583', '2404', '2573', '7956', '9026', '1283', '5337', '6956', '6927', '6352', '707', '5802', '7525', '3001', '2741', '6567', '501', '1801'],
                     'val': ['2078', '84', '6313', '422', '3752', '2803', '7850', '1988', '3576', '777', '2902', '174', '2277', '3536', '652', '6319', '5536', '5338', '2035', '8297', '1272', '2086', '3000', '5895', '2412', '6295', '251', '6345', '3081', '2428', '1919', '1462', '1993', '6241', '1673', '3853', '3170', '7976', '5694', '8842'],
                     'test': ['4077', '3729', '3570', '4446', '3575', '1089', '8230', '8224', '5639', '7176', '4970', '6930', '1221', '7127', '1284', '6829', '237', '1580', '7729', '2830', '4992', '1320', '260', '7021', '2300', '2094', '1188', '8463', '672', '61', '8455', '121', '8555', '2961', '908', '5142', '5683', '1995', '5105', '4507']}


Libri2Mix_test_path = '/storageNVME/fei/data/speech/Librimix/Libri2Mix/wav8k/min/metadata/mixture_test_mix_clean.csv'
Libri3Mix_test_path = '/storageNVME/fei/data/speech/Librimix/Libri3Mix/wav8k/min/metadata/mixture_test_mix_clean.csv'
SparseLibri3Mix_path = '/storageNVME/fei/data/speech/Librimix/SparseLibriMix/wav8000/metadata/mixture_sparse_3_0.2_mix_clean.csv'
SparseLibri4Mix_path = '/storageNVME/fei/data/speech/Librimix/SparseLibriMix/wav8000/metadata/mixture_sparse_4_0.2_mix_clean.csv'
SparseLibri5Mix_path = '/storageNVME/fei/data/speech/Librimix/SparseLibriMix/wav8000/metadata/mixture_sparse_5_0.2_mix_clean.csv'
TEST = {
    'Libri2Mix_test': (2, Libri2Mix_test_path),
    'Libri3Mix_test': (3, Libri3Mix_test_path),
    'SparseLibri3Mix': (3, SparseLibri3Mix_path),
    'SparseLibri4Mix': (4, SparseLibri4Mix_path),
    'SparseLibri5Mix': (5, SparseLibri5Mix_path)
}